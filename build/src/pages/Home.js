"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const separator_1 = require("@/components/ui/separator");
const input_1 = require("@/components/ui/input");
const react_webcam_1 = __importDefault(require("react-webcam"));
const storage_1 = require("firebase/storage");
const firebaseConfig_1 = require("../firebaseConfig");
const lucide_react_1 = require("lucide-react");
const react_router_dom_1 = require("react-router-dom");
const nocam_png_1 = __importDefault(require("../nocam.png")); // Replace with the actual path to your fallback image
const openai_1 = require("openai");
const react_toastify_1 = require("react-toastify");
require("react-toastify/dist/ReactToastify.css");
const openai = new openai_1.OpenAI({
    //@ts-ignore
    apiKey: import.meta.env.VITE_REACT_SECRET_API,
    dangerouslyAllowBrowser: true
});
const Home = () => {
    const webcamRef = (0, react_1.useRef)(null);
    const [image, setImage] = (0, react_1.useState)(null);
    const [response, setResponse] = (0, react_1.useState)(null);
    const [webcamAvailable, setWebcamAvailable] = (0, react_1.useState)(true);
    const [request, setRequest] = (0, react_1.useState)(false);
    const navigate = (0, react_router_dom_1.useNavigate)();
    (0, react_1.useEffect)(() => {
        // Check if webcam is available
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(() => setWebcamAvailable(true))
            .catch(() => setWebcamAvailable(false));
    }, []);
    const capture = () => {
        const imageSrc = webcamRef.current?.getScreenshot();
        if (imageSrc) {
            setImage(imageSrc);
        }
        else {
            console.error('Failed to capture image');
        }
    };
    const deleteImage = () => {
        setImage(null);
    };
    const handleFileChange = (event) => {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                const base64Image = reader.result;
                if (typeof base64Image === 'string') {
                    setImage(base64Image);
                }
                else {
                    console.error('Failed to read file as a string');
                }
            };
            reader.readAsDataURL(file);
        }
    };
    const uploadImageToServer = async (base64Image) => {
        const storageRef = (0, storage_1.ref)(firebaseConfig_1.storage, `images/${Date.now()}.jpg`);
        await (0, storage_1.uploadString)(storageRef, base64Image, 'data_url');
        const downloadURL = await (0, storage_1.getDownloadURL)(storageRef);
        return downloadURL;
    };
    const confirmImage = async () => {
        if (image) {
            try {
                setRequest(true);
                const imageURL = await uploadImageToServer(image);
                const response = await openai.chat.completions.create({
                    model: "gpt-4o",
                    messages: [
                        {
                            role: "user",
                            content: [
                                { type: "text", text: "You will send nothing but a JSON file raw text so dont try and format it for my webiste purpose (ex. ```json), This is a receipt split bill website, you will seperate this into a json file such as {Person 1: $12.41 (Name of the food), Person 2 (Name of food #2): $12.31}, if an item has 3 of the same thing its mostly likey 3 different people also figure out so the tax and tips is split evenlly and add a section for it. Again the message you are return should not include \`\`\` json\`\`\` in it because it messes up my code, If you do not recoginze a receipt give a json with error After that  I want you to follow a specific format { name: \"Person 1\", order:\ \"Burger, Fries, Soda\", amount: 25.99, },{name: \"Person 2\",order: \"Salad, Water\",amount: 12.5,},{name: \"Person 3\",order:\ \"Pizza, Beer\",amount: 18.75,},As such, and if there's multiple of 1 item split it into different people.Again let me clarify I do not want you to send anything but the json because it messes up with my code." },
                                {
                                    type: "image_url",
                                    image_url: {
                                        url: imageURL,
                                    },
                                },
                            ],
                        },
                    ],
                    max_tokens: 3000,
                });
                const responseContent = response.choices[0].message.content;
                if (responseContent === null) {
                    react_toastify_1.toast.warn('No response received. Please try again.', {
                        position: "top-center",
                        autoClose: 5000,
                        hideProgressBar: false,
                        closeOnClick: true,
                        pauseOnHover: true,
                        draggable: true,
                        progress: undefined,
                        theme: "dark",
                    });
                    setRequest(false);
                    return;
                }
                // Parse the response content to JSON
                const parsedResponse = JSON.parse(responseContent);
                if (parsedResponse.error) {
                    console.error('Error:', parsedResponse.error);
                    react_toastify_1.toast.warn('Error: ' + parsedResponse.error, {
                        position: "top-center",
                        autoClose: 5000,
                        hideProgressBar: false,
                        closeOnClick: true,
                        pauseOnHover: true,
                        draggable: true,
                        progress: undefined,
                        theme: "dark",
                    });
                }
                else {
                    console.log('Valid response:', parsedResponse);
                    navigate('/response', { state: { response: parsedResponse } });
                    setResponse(responseContent);
                }
                setRequest(false);
            }
            catch (error) {
                console.error("Error uploading image: ", error);
            }
        }
    };
    return ((0, jsx_runtime_1.jsx)("div", { className: "flex flex-col items-center justify-center h-screen bg-background", children: (0, jsx_runtime_1.jsxs)("div", { className: "max-w-md w-full space-y-8", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("h1", { className: "text-3xl font-bold tracking-tight", children: "Split the Bill" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-2 text-muted-foreground", children: "Easily divide expenses with friends and family." })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { className: "p-6 space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col items-center justify-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "w-full rounded-lg overflow-hidden", children: (0, jsx_runtime_1.jsx)("div", { className: "relative", children: image ? ((0, jsx_runtime_1.jsxs)("div", { style: { position: 'relative', display: 'inline-block' }, children: [(0, jsx_runtime_1.jsx)("img", { src: image, alt: "Captured", style: { width: '100%', height: 'auto' } }), (0, jsx_runtime_1.jsx)("button", { onClick: deleteImage, style: {
                                                        position: 'absolute',
                                                        top: 0,
                                                        left: 0,
                                                        backgroundColor: 'red',
                                                        color: 'white',
                                                        border: 'none',
                                                        cursor: 'pointer',
                                                        fontSize: '16px',
                                                        padding: '5px 10px',
                                                    }, children: "X" })] })) : ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: webcamAvailable ? ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(react_webcam_1.default, { audio: false, ref: webcamRef, screenshotFormat: "image/jpeg", style: { width: '100%', height: 'auto' } }) })) : ((0, jsx_runtime_1.jsx)("img", { src: nocam_png_1.default, alt: "Fallback", width: 640, height: 480 })) })) }) }), (0, jsx_runtime_1.jsxs)("div", { className: "mt-4 flex gap-2", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: capture, children: [(0, jsx_runtime_1.jsx)(CameraIcon, { className: "mr-2 h-4 w-4" }), "Take Photo"] }), (0, jsx_runtime_1.jsx)(react_toastify_1.ToastContainer, {})] })] }), (0, jsx_runtime_1.jsx)(separator_1.Separator, {}), (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-muted-foreground", children: "Or you can upload an existing receipt image." }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: "file", className: "mt-4", onChange: handleFileChange })] }), image &&
                            (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)(separator_1.Separator, {}), (0, jsx_runtime_1.jsx)("div", { className: "mt-4 flex justify-center gap-2", children: request ? ((0, jsx_runtime_1.jsxs)(button_1.Button, { disabled: true, variant: "outline", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Loader2, { className: "mr-2 h-4 w-4 animate-spin" }), "Confirm and Submit"] })) : ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", onClick: confirmImage, children: "Confirm and Submit" })) })] })] })] }) }));
};
function CameraIcon(props) {
    return ((0, jsx_runtime_1.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: [(0, jsx_runtime_1.jsx)("path", { d: "M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z" }), (0, jsx_runtime_1.jsx)("circle", { cx: "12", cy: "13", r: "3" })] }));
}
function UploadIcon(props) {
    return ((0, jsx_runtime_1.jsxs)("svg", { ...props, xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: [(0, jsx_runtime_1.jsx)("path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" }), (0, jsx_runtime_1.jsx)("polyline", { points: "17 8 12 3 7 8" }), (0, jsx_runtime_1.jsx)("line", { x1: "12", x2: "12", y1: "3", y2: "15" })] }));
}
exports.default = Home;
//# sourceMappingURL=data:application/json;base64,