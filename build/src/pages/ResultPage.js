"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_router_dom_1 = require("react-router-dom");
const card_1 = require("@/components/ui/card");
const label_1 = require("@/components/ui/label");
const input_1 = require("@/components/ui/input");
const table_1 = require("@/components/ui/table");
const button_1 = require("@/components/ui/button");
const ResultPage = () => {
    const location = (0, react_router_dom_1.useLocation)();
    const { response } = location.state;
    const [items, setItems] = (0, react_1.useState)([]);
    (0, react_1.useEffect)(() => {
        if (response) {
            const parsedItems = Object.entries(response).map(([name, details]) => {
                const detailItem = details; // Type assertion
                return {
                    name,
                    order: detailItem.order || '',
                    amount: detailItem.amount || 0,
                };
            });
            setItems(parsedItems);
        }
    }, [response]);
    const [taxRate, setTaxRate] = (0, react_1.useState)(0.08);
    const [tipRate, setTipRate] = (0, react_1.useState)(0.15);
    const calculateTotal = (item) => {
        const subtotal = item.amount;
        const tax = subtotal * taxRate;
        const tip = subtotal * tipRate;
        return subtotal + tax + tip;
    };
    const handleTaxRateChange = (e) => {
        setTaxRate(parseFloat(e.target.value) / 100);
    };
    const handleTipRateChange = (e) => {
        setTipRate(parseFloat(e.target.value) / 100);
    };
    const onDragStart = (event, index) => {
        event.dataTransfer.setData("draggedItemIndex", index);
    };
    const onDrop = (event, dropIndex) => {
        const draggedItemIndex = event.dataTransfer.getData("draggedItemIndex");
        if (draggedItemIndex === undefined) {
            return;
        }
        const draggedIndex = parseInt(draggedItemIndex, 10);
        if (draggedIndex === dropIndex) {
            return;
        }
        const updatedItems = [...items];
        const draggedItem = updatedItems[draggedIndex];
        const droppedItem = updatedItems[dropIndex];
        const combinedItem = {
            ...droppedItem,
            amount: droppedItem.amount + draggedItem.amount,
            order: `${droppedItem.order}, ${draggedItem.order}`,
            combined: true,
            originalItems: [...(droppedItem.originalItems || [droppedItem]), draggedItem],
        };
        updatedItems.splice(dropIndex, 1, combinedItem);
        updatedItems.splice(draggedIndex, 1);
        setItems(updatedItems);
    };
    const onDragOver = (event) => {
        event.preventDefault();
    };
    const separateItem = (index) => {
        const updatedItems = [...items];
        const itemToSeparate = updatedItems[index];
        if (itemToSeparate.combined && itemToSeparate.originalItems) {
            updatedItems.splice(index, 1, ...itemToSeparate.originalItems);
            updatedItems.sort((a, b) => a.name.localeCompare(b.name));
            setItems(updatedItems);
        }
    };
    const handleNameChange = (index, newName) => {
        const updatedItems = [...items];
        updatedItems[index].name = newName;
        setItems(updatedItems);
    };
    return ((0, jsx_runtime_1.jsx)("div", { className: "w-full p-4 sm:p-6", children: (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { children: "Split the Bill" }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: "View the total amount owed." })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid gap-4 mb-6 sm:grid-cols-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "tax-rate", children: "Tax Rate:" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "tax-rate", type: "number", min: "0", max: "100", value: taxRate * 100, onChange: handleTaxRateChange, className: "w-20" }), (0, jsx_runtime_1.jsx)("span", { children: "%" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "tip-rate", children: "Tip Rate:" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "tip-rate", type: "number", min: "0", max: "100", value: tipRate * 100, onChange: handleTipRateChange, className: "w-20" }), (0, jsx_runtime_1.jsx)("span", { children: "%" })] })] }), (0, jsx_runtime_1.jsx)("div", { className: "overflow-x-auto", children: (0, jsx_runtime_1.jsxs)(table_1.Table, { children: [(0, jsx_runtime_1.jsx)(table_1.TableHeader, { children: (0, jsx_runtime_1.jsxs)(table_1.TableRow, { children: [(0, jsx_runtime_1.jsx)(table_1.TableHead, { children: "Name" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: "Order" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: "text-right", children: "Subtotal" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: "text-right", children: "Tax" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: "text-right", children: "Tip" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: "text-right", children: "Total" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: "text-right", children: "Actions" })] }) }), (0, jsx_runtime_1.jsx)(table_1.TableBody, { children: items.map((item, index) => ((0, jsx_runtime_1.jsxs)(table_1.TableRow, { draggable: true, onDragStart: (event) => onDragStart(event, index), onDragOver: onDragOver, onDrop: (event) => onDrop(event, index), children: [(0, jsx_runtime_1.jsx)(table_1.TableCell, { className: "font-medium", children: (0, jsx_runtime_1.jsx)(input_1.Input, { className: 'w-1/2', type: "text", value: item.name, onChange: (e) => handleNameChange(index, e.target.value) }) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { children: item.order }), (0, jsx_runtime_1.jsxs)(table_1.TableCell, { className: "text-right", children: ["$", item.amount.toFixed(2)] }), (0, jsx_runtime_1.jsxs)(table_1.TableCell, { className: "text-right", children: ["$", (item.amount * taxRate).toFixed(2)] }), (0, jsx_runtime_1.jsxs)(table_1.TableCell, { className: "text-right", children: ["$", (item.amount * tipRate).toFixed(2)] }), (0, jsx_runtime_1.jsxs)(table_1.TableCell, { className: "text-right", children: ["$", calculateTotal(item).toFixed(2)] }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: "text-right", children: item.combined && ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", onClick: () => separateItem(index), children: "Separate" })) })] }, index))) })] }) })] }), (0, jsx_runtime_1.jsx)(card_1.CardFooter, { children: (0, jsx_runtime_1.jsxs)("div", { className: "grid gap-4 sm:flex sm:items-center sm:justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between font-bold", children: [(0, jsx_runtime_1.jsx)("div", { children: "Total:" }), (0, jsx_runtime_1.jsxs)("div", { children: ["$", items.reduce((total, item) => total + calculateTotal(item), 0).toFixed(2)] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", children: "Split Bill" })] }) })] }) }));
};
exports.default = ResultPage;
//# sourceMappingURL=data:application/json;base64,